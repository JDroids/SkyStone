
package org.firstinspires.ftc.teamcode.test;

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorEx;
import com.qualcomm.robotcore.hardware.PIDCoefficients;

import org.firstinspires.ftc.robotcore.external.ClassFactory;
import org.firstinspires.ftc.robotcore.external.hardware.camera.CameraName;
import org.firstinspires.ftc.robotcore.external.hardware.camera.WebcamName;
import org.firstinspires.ftc.robotcore.external.matrices.OpenGLMatrix;
import org.firstinspires.ftc.robotcore.external.matrices.VectorF;
import org.firstinspires.ftc.robotcore.external.navigation.Orientation;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaLocalizer;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaTrackable;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaTrackableDefaultListener;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaTrackables;

import java.util.ArrayList;
import java.util.List;

@Autonomous(name="PIDCoefficientsTest")
public class PIDCoefficientsTest extends LinearOpMode {
    DcMotor backLeft;
    DcMotor backRight;
    DcMotor frontLeft;
    DcMotor frontRight;

    public void runOpMode() {
        frontLeft = (DCMotorEx) hardwareMap.get(DcMotor.class, "front Left");
        backLeft = (DCMotorEx) hardwareMap.get(DcMotor.class, "back Left");
        backRight = (DCMotorEx) hardwareMap.get(DcMotor.class, "back Right");
        frontRight = (DCMotorEx) hardwareMap.get(DcMotor.class, "front Right");

        waitForStart();
        PIDCoefficients pidBL = backLeft.getPIDCoefficients(DcMotor.RunMode.RUN_USING_ENCODER);
        PIDCoefficients pidFR = frontRight.getPIDCoefficients(DcMotor.RunMode.RUN_USING_ENCODER);

        PIDCoefficients pidNew = new PIDCoefficients(.003, .00003, 0);
        backLeft.setPIDCoefficients(DcMotor.RunMode.RUN_USING_ENCODER, pidNew);
        frontRight.setPIDCoefficients(DcMotor.RunMode.RUN_USING_ENCODER, pidNew);

        PIDCoefficients pidModifiedbl = backLeft.getPIDCoefficients(DcMotor.RunMode.RUN_USING_ENCODER);
        PIDCoefficients pidModifiedfr = frontRight.getPIDCoefficients(DcMotor.RunMode.RUN_USING_ENCODER);
        while (opModeIsActive()) {
            telemetry.addData("Runtime", "%.03f", getRuntime());
            telemetry.addData("P,I,D (BackLeft)", "%.04f, %.04f, %.0f",
                    pidBL.p, pidBL.i, pidBL.d);
            telemetry.addData("P,I,D (FrontRight)", "%.04f, %.04f, %.0f",
                    pidFR.p, pidFR.i, pidFR.d);
            telemetry.addData("P,I,D (BackLeft - modified)", "%.04f, %.04f, %.04f",
                    pidModifiedbl.p, pidModifiedbl.i, pidModifiedbl.d);
            telemetry.addData("P,I,D (FrontRight - modified)", "%.04f, %.04f, %.04f",
                    pidModifiedfr.p, pidModifiedfr.i, pidModifiedfr.d);
            telemetry.update();
        }
    }
}